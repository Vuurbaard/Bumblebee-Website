image: ubuntu:latest

stages:
 - prepare
 - build
 - test
 - deploy

variables:
  NODE_IMAGE: "node:14"
  DOCKER_DIND_IMAGE: "docker:20.10.3-dind"
  DOCKER_IMAGE: "docker:20.10.3"
  DOCKER_BUILDKIT: 1
  DOCKER_CLI_EXPERIMENTAL: enabled

# Retrieve all dependencies using composer
# This uses hirak/prestissimo to improve retrieval speeds
prepare dependencies:
  image: $NODE_IMAGE
  stage: prepare
  script:
    - npm install -g @angular/cli
    - npm ci
    - ng build --prod
  cache:
    key: "cache-$CI_COMMIT_REF_SLUG-npm"
    paths:
     - node_modules/
  artifacts:
    name: "$CI_COMMIT_SHA-build"
    untracked: false
    expire_in: 1 week
    paths:
     - dist/

build website:
  image: $DOCKER_IMAGE
  services:
    - $DOCKER_DIND_IMAGE
  stage: build
  script:
    # install composer and get dependencies
    - echo $CI_ENVIRONMENT_SLUG
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:latest --build-arg NPM_INSTALL_BEFORE=true --build-arg DOCKER_SRC=./docker/  -f docker/Dockerfile ./
    - docker push ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:latest
  dependencies:
    - prepare dependencies
  only:
    - master


# Push the image to Docker Swarm as service and run a rolling deploy
push to production:
  image: $DOCKER_IMAGE
  stage: deploy
  variables:
    DOCKER_HOST: ssh://$SSH_USER@$SSH_HOST
  image: docker:latest
  script:
    - apk add openssh --no-cache
    - mkdir -p ~/.ssh/ &&  echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - eval $(ssh-agent -s)
    - chmod 600 $SSH_KEY && ssh-add $SSH_KEY
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD $CI_REGISTRY
    - docker stack deploy --prune --resolve-image=always --with-registry-auth --compose-file=docker-stack-compose.yml ${CI_PROJECT_NAMESPACE}-${CI_PROJECT_NAME}
  environment:
    name: production
    url: https://bmbl.cloud
  dependencies: []
  only:
    - master
